import heapq

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = {i: [] for i in range(vertices)}

    def add_edge(self, u, v, weight):
        self.adjacency_list[u].append((v, weight))
        self.adjacency_list[v].append((u, weight))  # For undirected graph

    def dijkstra(self, start):
        distances = {i: float('inf') for i in range(self.vertices)}
        distances[start] = 0
        priority_queue = [(0, start)]

        while priority_queue:
            current_distance, current_vertex = heapq.heappop(priority_queue)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor, weight in self.adjacency_list[current_vertex]:
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances

# Example usage
if __name__ == "__main__":
    graph = Graph(6)
    edges = [
        (0, 1, 4),
        (0, 2, 2),
        (1, 2, 5),
        (1, 3, 10),
        (2, 4, 3),
        (4, 3, 4),
        (3, 5, 11)
    ]

    for u, v, weight in edges:
        graph.add_edge(u, v, weight)

    start_vertex = 0
    distances = graph.dijkstra(start_vertex)
    print(f"Shortest distances from vertex {start_vertex}: {distances}")
    
